// Copyright 2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: LicenseRef-.amazon.com.-AmznSL-1.0
// Licensed under the Amazon Software License  http://aws.amazon.com/asl/

namespace com.amazon.alexa.skill.components.catalog_explorer.navigate

import com.amazon.alexa.ask.conversations.*
import com.amazon.ask.types.builtins.AMAZON.*
import com.amazon.alexa.schema.*
import com.amazon.alexa.skill.components.catalog_explorer.offers.*
import com.amazon.alexa.skill.components.catalog_explorer.util.*
import com.amazon.alexa.skill.components.catalog_explorer.types.*
import com.amazon.alexa.skill.components.catalog_explorer.*

action Nothing recordInitialEvent()
action Nothing recordNextEvent()
action Nothing recordPrevEvent()
action NUMBER convertOrdinalToIndex(Ordinal ordinal)
action NUMBER convertRelativePositionToIndex(RelativePosition relativePosition)

// simple action to generate a random index between 1 and the list size provided (inclusive)
// Note: passing in list size currently commented out as passing such leads to 
//       run-time issues; currently this method will only work correctly when 
//       using session for data passing (ListNav.useSession is true on API side)
action NUMBER generateRandomIndex(/*NUMBER listSize*/)

dialog Nothing presentPage<SearchConditions, Item>(
    Action api,
    RecommendationResult<SearchConditions, Item> result,
    Response response
) {
    sample {
        performNotifyResponse(
            NotifyResponseContents {
                actionName = api,
                response = response,
                payload = NavigationPayload{result = result}
            }
        )
    }
}

dialog RecommendationResult<SearchConditions, Item> presentPage_withHint<SearchConditions, Item>(
    PropertyConfig<SearchConditions, Item> config,
    Action api,
    RecommendationResult<SearchConditions, Item> result,
    Response response,
    optional CatalogReference catalogRef

) {
    sample {
        notifyWithProactiveHint(
            config,
            config.offers,
            result,
            NotifyResponseContents {
                actionName = api,
                response = response,
                payload = NavigationPayload{result = result}
            },
            catalogRef

        )
    }
}

// represents the navigate-next turn, complete with event, API call, and response
dialog RecommendationResult<SearchConditions, Item> navigateNext<SearchConditions, Item>(
    PropertyConfig<SearchConditions, Item> config,
    RecommendationResult<SearchConditions, Item> searchResult,
    optional CatalogReference catalogRef
) {
    sample {
        expect(Invoke, config.navConfig.paginationConfig.nextEvent)
        recordNextEvent()
        getPage = config.navConfig.paginationConfig.getPageApi
        result = getPage(searchResult.searchConditions, searchResult.recommendations.nextPageToken,catalogRef)
        presentPage(getPage,result,config.navConfig.paginationConfig.presentPageResponse)
        result
    }
}
dialog RecommendationResult<SearchConditions, Item> navigatePrev<SearchConditions, Item>(
    PropertyConfig<SearchConditions, Item> config,
    RecommendationResult<SearchConditions, Item> searchResult,
    optional CatalogReference catalogRef
) {
    sample {
        expect(Invoke, config.navConfig.paginationConfig.prevEvent)
        recordPrevEvent()
        getPage = config.navConfig.paginationConfig.getPageApi
        result = getPage(searchResult.searchConditions, searchResult.recommendations.prevPageToken,catalogRef)
        presentPage(getPage,result,config.navConfig.paginationConfig.presentPageResponse)
        result
    }
}
dialog RecommendationResult<SearchConditions, Item> navigateNext_withHint<SearchConditions, Item>(
    PropertyConfig<SearchConditions, Item> config,
    RecommendationResult<SearchConditions, Item> searchResult,
    optional CatalogReference catalogRef
) {
    sample {
        expect(Invoke, config.navConfig.paginationConfig.nextEvent)
        recordNextEvent()
        getPage = config.navConfig.paginationConfig.getPageApi
        result = getPage(searchResult.searchConditions, searchResult.recommendations.nextPageToken,catalogRef)
        presentPage_withHint(config,getPage,result,config.navConfig.paginationConfig.presentPageResponse, catalogRef)
        result
    }
}
dialog RecommendationResult<SearchConditions, Item> navigatePrevious_withHint<SearchConditions, Item>(
    PropertyConfig<SearchConditions, Item> config,
    RecommendationResult<SearchConditions, Item> searchResult,
    optional CatalogReference catalogRef
) {
    sample {
        expect(Invoke, config.navConfig.paginationConfig.prevEvent)
        recordPrevEvent()
        getPage = config.navConfig.paginationConfig.getPageApi
        result = getPage(searchResult.searchConditions, searchResult.recommendations.prevPageToken,catalogRef)
        presentPage_withHint(config,getPage,result,config.navConfig.paginationConfig.presentPageResponse, catalogRef)
        result
    }
}
dialog RecommendationResult<SearchConditions, Item> navigateSelectItemByOrdinal<SearchConditions, Item>(
    PropertyConfig<SearchConditions, Item> config,
    RecommendationResult<SearchConditions, Item> searchResult,
    optional CatalogReference catalogRef
) {
    sample {
        slotValues = expect(Invoke, config.navConfig.selectionConfig.selectByOrdinalEvent)
        index = convertOrdinalToIndex(slotValues.ordinal)
        getItem=config.navConfig.selectionConfig.selectItemApi
        result = getItem(searchResult.searchConditions, searchResult.recommendations ,index,catalogRef)
        presentPage(getItem,result,config.navConfig.selectionConfig.presentSelectedItemResponse)
        result
    }
}
dialog RecommendationResult<SearchConditions, Item> navigateSelectItemByRelativePosition<SearchConditions, Item>(
    PropertyConfig<SearchConditions, Item> config,
    RecommendationResult<SearchConditions, Item> searchResult,
    optional CatalogReference catalogRef
) {
    sample {
        slotValues = expect(Invoke, config.navConfig.selectionConfig.selectByRelativePositionEvent)
        index = convertRelativePositionToIndex(slotValues.relativePosition)
        getItem=config.navConfig.selectionConfig.selectItemApi
        result = getItem(searchResult.searchConditions, searchResult.recommendations ,index,catalogRef)
        presentPage(getItem,result,config.navConfig.selectionConfig.presentSelectedItemResponse)
        result
    }
}
dialog RecommendationResult<SearchConditions, Item> navigateSelectItemByIndex<SearchConditions, Item>(
    PropertyConfig<SearchConditions, Item> config,
    RecommendationResult<SearchConditions, Item> searchResult,
    optional CatalogReference catalogRef
) {
    sample {
        slotValues = expect(Invoke, config.navConfig.selectionConfig.selectByIndexEvent)
        getItem=config.navConfig.selectionConfig.selectItemApi
        result = getItem(searchResult.searchConditions, searchResult.recommendations ,slotValues.index,catalogRef)
        presentPage(getItem,result,config.navConfig.selectionConfig.presentSelectedItemResponse)
        result
    }
}
dialog RecommendationResult<SearchConditions, Item> navigateSelectItemByOrdinal_withHint<SearchConditions, Item>(
    PropertyConfig<SearchConditions, Item> config,
    RecommendationResult<SearchConditions, Item> searchResult,
    optional CatalogReference catalogRef
) {
    sample {
        slotValues = expect(Invoke, config.navConfig.selectionConfig.selectByOrdinalEvent)
        index = convertOrdinalToIndex(slotValues.ordinal)
        getItem=config.navConfig.selectionConfig.selectItemApi
        result = getItem(searchResult.searchConditions, searchResult.recommendations ,index, catalogRef)
        presentPage_withHint(config,getItem,result,config.navConfig.selectionConfig.presentSelectedItemResponse, catalogRef)
        result
    }
}
dialog RecommendationResult<SearchConditions, Item> navigateSelectItemByRelativePosition_withHint<SearchConditions, Item>(
    PropertyConfig<SearchConditions, Item> config,
    RecommendationResult<SearchConditions, Item> searchResult,
    optional CatalogReference catalogRef
) {
    sample {
        slotValues = expect(Invoke, config.navConfig.selectionConfig.selectByRelativePositionEvent)
        index = convertRelativePositionToIndex(slotValues.relativePosition)
        getItem=config.navConfig.selectionConfig.selectItemApi
        result = getItem(searchResult.searchConditions, searchResult.recommendations ,index, catalogRef)
        presentPage_withHint(config,getItem,result,config.navConfig.selectionConfig.presentSelectedItemResponse, catalogRef)
        result
    }
}

dialog RecommendationResult<SearchConditions, Item> navigateSelectItemByIndex_withHint<SearchConditions, Item>(
    PropertyConfig<SearchConditions, Item> config,
    RecommendationResult<SearchConditions, Item> searchResult,
    optional CatalogReference catalogRef
) {
    sample {
        slotValues = expect(Invoke, config.navConfig.selectionConfig.selectByIndexEvent)
        getItem=config.navConfig.selectionConfig.selectItemApi
        result = getItem(searchResult.searchConditions, searchResult.recommendations, slotValues.index, catalogRef)
        presentPage_withHint(config,getItem,result,config.navConfig.selectionConfig.presentSelectedItemResponse, catalogRef)
        result
    }
}

dialog RecommendationResult<SearchConditions, Item> allNavigationPaths<SearchConditions, Item>(
    PropertyConfig<SearchConditions, Item> config,
    RecommendationResult<SearchConditions, Item> searchResult,
    optional CatalogReference catalogRef
) {
    sample {
        navigateNext_withHint(config,searchResult,catalogRef)
    }

    sample {
        navigatePrevious_withHint(config,searchResult,catalogRef)
    }

    sample {
        navigateSelectItemByOrdinal_withHint(config,searchResult,catalogRef)
    } 

    sample {
        navigateSelectItemByRelativePosition_withHint(config,searchResult,catalogRef)
    } 

    sample {
        navigateSelectItemByIndex_withHint(config,searchResult,catalogRef)
    }
}

// all possible permutations of possible navigation turns with a extra sample where navigation is
// not done
// IMPROVE: replace with a wrapper Optional reusable dialog once lambdas are supported
dialog RecommendationResult<SearchConditions, Item> allNavigationPaths_WithPassthrough<SearchConditions, Item>(
    PropertyConfig<SearchConditions, Item> config,
    RecommendationResult<SearchConditions, Item> searchResult,
    optional CatalogReference catalogRef
) {
    // pass-through sample to represent dialog flow where user does not perform a navigate
    sample {
        searchResult
    }

    sample {
        allNavigationPaths(config,searchResult,catalogRef)
    }
}