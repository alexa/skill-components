// Copyright 2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: LicenseRef-.amazon.com.-AmznSL-1.0
// Licensed under the Amazon Software License  http://aws.amazon.com/asl/

namespace com.amazon.alexa.skill.components.catalog_explorer.search

import com.amazon.alexa.ask.conversations.*
import com.amazon.ask.types.builtins.AMAZON.*
import com.amazon.alexa.schema.*

import com.amazon.alexa.skill.components.catalog_explorer.offers.*
import com.amazon.alexa.skill.components.catalog_explorer.util.*
import com.amazon.alexa.skill.components.catalog_explorer.types.*
import com.amazon.alexa.skill.components.catalog_explorer.*

dialog Nothing recommendationResponse<SearchConditions, Item, ItemName> (
    PropertyConfig<SearchConditions, Item, ItemName> config,
    SearchPattern<SearchConditions, Item> searchPattern,
     RecommendationResult<SearchConditions, Item>  result
) {
    sample {
        generalResponse(
            actionPerformed = searchPattern.searchApiRef, 
            responsePrompt = searchPattern.searchResponse, 
            payload = RecommendationPayload { result = result },
            error = result.error
        )
    }
}

dialog RecommendationResult<SearchConditions, Item> recommendationResponse_withHint<SearchConditions, Item, ItemName> (
    PropertyConfig<SearchConditions, Item, ItemName> config,
    SearchPattern<SearchConditions, Item> searchPattern,
    RecommendationResult<SearchConditions, Item>  result,
    optional CatalogReference catalogRef
) {
    sample {
        notifyWithProactiveHint(
            config,
            config.offers,
            result, 
            NotifyResponseContents{
                actionName = searchPattern.searchApiRef,
                response = searchPattern.searchResponse,
                payload = RecommendationPayload { result = result }
            }, 
            catalogRef
        )

    }
}

dialog  RecommendationResult<SearchConditions, Item> searchForItem_Index0<SearchConditions, Item, ItemName> (
    PropertyConfig<SearchConditions,Item, ItemName> config,
    optional CatalogReference catalogRef
) {
    sample {
        searchConditions = expect(Invoke, config.searchPatterns[0].searchEvent)
        search=config.searchPatterns[0].searchApiAdaptor
        result = search(searchConditions,catalogRef)
        recommendationResponse(config, config.searchPatterns[0], result)
        result
    }
}
dialog  RecommendationResult<SearchConditions, Item> searchForItem_Index0_withHint<SearchConditions, Item, ItemName> (
    PropertyConfig<SearchConditions,Item, ItemName> config,
    optional CatalogReference catalogRef
) {
    sample {
        searchConditions = expect(Invoke, config.searchPatterns[0].searchEvent)
        search=config.searchPatterns[0].searchApiAdaptor
        result = search(searchConditions,catalogRef)

        recommendationResponse_withHint(config, config.searchPatterns[0], result,catalogRef)
    }
}

dialog  RecommendationResult<SearchConditions, Item>  searchForItem_Index1<SearchConditions, Item, ItemName> (
    PropertyConfig<SearchConditions,Item, ItemName> config,
    optional CatalogReference catalogRef
) {
    sample {
        searchConditions = expect(Invoke, config.searchPatterns[1].searchEvent)
        search=config.searchPatterns[1].searchApiAdaptor
        result = search(searchConditions,catalogRef)

        recommendationResponse(config, config.searchPatterns[1], result)
        result
    }
}
dialog  RecommendationResult<SearchConditions, Item>  searchForItem_Index1_withHint<SearchConditions, Item, ItemName> (
    PropertyConfig<SearchConditions,Item, ItemName> config,
    optional CatalogReference catalogRef
) {
    sample {
        searchConditions = expect(Invoke, config.searchPatterns[1].searchEvent)

        search=config.searchPatterns[1].searchApiAdaptor
        result = search(searchConditions,catalogRef)

        recommendationResponse_withHint(config, config.searchPatterns[1], result,catalogRef)
    }
}

dialog  RecommendationResult<SearchConditions, Item>  searchForItem_Index2<SearchConditions, Item, ItemName> (
    PropertyConfig<SearchConditions,Item, ItemName> config,
    optional CatalogReference catalogRef
) {
    sample {
        searchConditions = expect(Invoke, config.searchPatterns[2].searchEvent)

        search=config.searchPatterns[2].searchApiAdaptor
        result = search(searchConditions,catalogRef)

        recommendationResponse(config, config.searchPatterns[2], result)
        result
    }
}
dialog  RecommendationResult<SearchConditions, Item>  searchForItem_Index2_withHint<SearchConditions, Item, ItemName> (
    PropertyConfig<SearchConditions,Item, ItemName> config,
    optional CatalogReference catalogRef
) {
    sample {
        searchConditions = expect(Invoke, config.searchPatterns[2].searchEvent)
        search= config.searchPatterns[2].searchApiAdaptor
       result = search(searchConditions,catalogRef)

       recommendationResponse_withHint(config, config.searchPatterns[2], result,catalogRef)
    }
}

// IMPROVE: replace with a wrapper Optional reusable dialog once lambdas are supported
dialog  RecommendationResult<SearchConditions, Item> searchForItem_Index0_WithPassthrough<SearchConditions, Item, ItemName> (
    PropertyConfig<SearchConditions, Item, ItemName> config,
    RecommendationResult<SearchConditions, Item> priorResult,
    optional CatalogReference catalogRef
) {
    // pass-through sample to represent dialog flow where user does not perform a search
    sample {
        priorResult
    }

    sample {
        searchForItem_Index0(config,catalogRef)
    }
}

dialog  RecommendationResult<SearchConditions, Item> searchForItem_Index0_WithVariations<SearchConditions, Item, ItemName> (
    PropertyConfig<SearchConditions, Item, ItemName> config,
    optional CatalogReference catalogRef
) {
    sample {
        searchForItem_Index0(config,catalogRef)
    }

    // same as normal flow above, but with slot combination variations to work around bug in optional parameter support
    // IMPROVE: remove this once issue with optional API arguments in simulator is addressed:
    //              https://sim.amazon.com/issues/P48666363
    sample {
        searchConditions = expect(Invoke, config.searchPatterns[0].searchEvent)
        
        search=config.searchPatterns[0].searchApiVariationsAdaptor
        result = search(searchConditions,catalogRef)

        recommendationResponse(config, config.searchPatterns[0], result)
        result
    }
}
dialog  RecommendationResult<SearchConditions, Item> searchForItem_Index0_WithVariations_withHint<SearchConditions, Item, ItemName> (
    PropertyConfig<SearchConditions, Item, ItemName> config,
    optional CatalogReference catalogRef
) {
    sample {
        searchForItem_Index0_withHint(config,catalogRef)
    }

    // same as normal flow above, but with slot combination variations to work around bug in optional parameter support
    // IMPROVE: remove this once issue with optional API arguments in simulator is addressed:
    //              https://sim.amazon.com/issues/P48666363
    sample {
        searchConditions = expect(Invoke, config.searchPatterns[0].searchEvent)

        search=config.searchPatterns[0].searchApiVariationsAdaptor
        result = search(searchConditions,catalogRef)

        recommendationResponse(config, config.searchPatterns[0], result)
        result
    }
}

dialog  RecommendationResult<SearchConditions, Item> searchForItem_Index1_WithVariations<SearchConditions, Item, ItemName> (
    PropertyConfig<SearchConditions, Item, ItemName> config,
    optional CatalogReference catalogRef
) {
    sample {
        searchForItem_Index1(config,catalogRef)
    }

    // same as normal flow above, but with slot combination variations to work around bug in optional parameter support
    // IMPROVE: remove this once issue with optional API arguments in simulator is addressed:
    //              https://sim.amazon.com/issues/P48666363
    sample {
        searchConditions = expect(Invoke, config.searchPatterns[1].searchEvent)

        search=config.searchPatterns[1].searchApiVariationsAdaptor
        result = search(searchConditions,catalogRef)

        recommendationResponse(config, config.searchPatterns[1], result)
        result
    }
}
dialog  RecommendationResult<SearchConditions, Item> searchForItem_Index1_WithVariations_withHint<SearchConditions, Item, ItemName> (
    PropertyConfig<SearchConditions, Item, ItemName> config,
    optional CatalogReference catalogRef
) {
    sample {
        searchForItem_Index1_withHint(config,catalogRef)
    }

    // same as normal flow above, but with slot combination variations to work around bug in optional parameter support
    // IMPROVE: remove this once issue with optional API arguments in simulator is addressed:
    //              https://sim.amazon.com/issues/P48666363
    sample {
        searchConditions = expect(Invoke, config.searchPatterns[1].searchEvent)

        search=config.searchPatterns[1].searchApiVariationsAdaptor
        result = search(searchConditions,catalogRef)

        recommendationResponse(config, config.searchPatterns[1], result)
        result
    }
}


dialog  RecommendationResult<SearchConditions, Item> searchForItem_Index2_WithVariations<SearchConditions, Item, ItemName> (
    PropertyConfig<SearchConditions, Item, ItemName> config,
    optional CatalogReference catalogRef
) {
    sample {
        searchForItem_Index2(config,catalogRef)
    }

    // same as normal flow above, but with slot combination variations to work around bug in optional parameter support
    // IMPROVE: remove this once issue with optional API arguments in simulator is addressed:
    //              https://sim.amazon.com/issues/P48666363
    sample {
        searchConditions = expect(Invoke, config.searchPatterns[2].searchEvent)

        search=config.searchPatterns[2].searchApiVariationsAdaptor
        result = search(searchConditions,catalogRef)

        recommendationResponse(config, config.searchPatterns[2], result)
        result
    }
}
dialog  RecommendationResult<SearchConditions, Item> searchForItem_Index2_WithVariations_withHint<SearchConditions, Item, ItemName> (
    PropertyConfig<SearchConditions, Item, ItemName> config,
    optional CatalogReference catalogRef
) {
    sample {
        searchForItem_Index2_withHint(config,catalogRef)
    }

    // same as normal flow above, but with slot combination variations to work around bug in optional parameter support
    // IMPROVE: remove this once issue with optional API arguments in simulator is addressed:
    //              https://sim.amazon.com/issues/P48666363
    sample {
        searchConditions = expect(Invoke, config.searchPatterns[2].searchEvent)

        search=config.searchPatterns[2].searchApiVariationsAdaptor
        result = search(searchConditions,catalogRef)

        recommendationResponse(config, config.searchPatterns[2], result)
        result
    }
}
