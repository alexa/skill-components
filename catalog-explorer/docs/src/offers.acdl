// Copyright 2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: LicenseRef-.amazon.com.-AmznSL-1.0
// Licensed under the Amazon Software License  http://aws.amazon.com/asl/

namespace com.amazon.alexa.skill.components.catalog_explorer.offers

import com.amazon.alexa.ask.conversations.*
import com.amazon.ask.types.builtins.AMAZON.*
import com.amazon.alexa.schema.*

import com.amazon.alexa.skill.components.catalog_explorer.navigate.*
import com.amazon.alexa.skill.components.catalog_explorer.util.*
import com.amazon.alexa.skill.components.catalog_explorer.types.*

dialog RecommendationResult<SearchConditions, Item> notifyWithProactiveHint<SearchConditions, Item>(
    PropertyConfig<SearchConditions, Item> config,
    CatalogOffers<SearchConditions, Item> offers,
    RecommendationResult<SearchConditions, Item> priorResult,
    NotifyResponseContents notifyResponseContents,
    optional CatalogReference catalogRef
) {
    sample {
        if (priorResult.offer != nothing) {
            offerHint(config, offers, priorResult, notifyResponseContents,catalogRef)
        } else {
            performNotifyResponse(notifyResponseContents)
            priorResult
        }
    }
}

dialog Nothing notifyWithProactiveHint_AffirmOnly<SearchConditions, Item>(
    CatalogOffers<SearchConditions, Item> offers,
    List<Item> priorRecommendations,
    NotifyResponseContents notifyResponseContents,
    ProactiveOffer offer,
    optional CatalogReference catalogRef
) {
    sample {
        if (offer != nothing) {
            offerHint_AffirmOnly(offers, priorRecommendations, notifyResponseContents, offer, catalogRef)
        } else {
            performNotifyResponse(notifyResponseContents)
        }
    }
}

dialog RecommendationResult<SearchConditions, Item> offerHint<SearchConditions, Item>(
    PropertyConfig<SearchConditions, Item> config,
    CatalogOffers<SearchConditions, Item> offers,
    RecommendationResult<SearchConditions, Item> priorResult,
    NotifyResponseContents notifyResponseContents,
    optional CatalogReference catalogRef
) {
    // modeling affirm case
    sample { 
        offerHint_AffirmOnly(
            offers,
            priorResult.recommendations.items, 
            notifyResponseContents, 
            priorResult.offer,
            catalogRef
        )
        priorResult
    }

    // modeling Deny of proactive hint offer; in which case we do call the navigate-next API
    // in order to offer a different recommendation (with it's own proactive hint if the API
    // returns one)
    sample { 
        performNotifyResponse(
            notifyResponseContents,
            Offer{ actionName = offers.acceptAction }
        )

        expect(act = Deny, event = offers.denyEvent)
        recordNextEvent()
        getPage = config.navConfig.paginationConfig.getPageApi
        denyResult = getPage(priorResult.searchConditions, priorResult.recommendations.nextPageToken,catalogRef)
        presentPage(getPage,denyResult,config.navConfig.paginationConfig.presentPageResponse)
        denyResult
    }
}

dialog Nothing offerHint_AffirmOnly<SearchConditions, Item>(
    CatalogOffers<SearchConditions, Item> offers,
    List<Item> priorRecommendations,
    NotifyResponseContents notifyResponseContents,
    ProactiveOffer offer,
    optional CatalogReference catalogRef
) {
    sample {
        performNotifyResponse(
            notifyResponseContents,
            Offer{ actionName = offers.acceptAction }
        )

        expect(act = Affirm, event = offers.acceptEvent)

        affirmAction = offers.acceptAction
        affirmResult = affirmAction(priorRecommendations, offer,catalogRef)

        // Note: We do not model chained hints to reduce skill complexity
        response(
            act = Notify{success = true, actionName = affirmAction}, 
            response = offers.acceptResponse,
            payload = CatalogOfferPayload{ result = affirmResult}
        )
    }
}